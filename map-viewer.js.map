{"version":3,"file":"map-viewer.js","sourceRoot":"","sources":["src/map-viewer.ts"],"names":[],"mappings":"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","sourcesContent":["import {LitElement, html} from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\nimport './composants/DataLoader.js';\nimport './composants/toggle-data.js'\n\nimport {createCesiumViewer, zoomToDataSource} from \"./cesium/cesiumHelpers\";\nimport {addData, addTileset} from './cesium/dataLoader';\n\nimport {styles} from \"./styles/styles\";\nimport {Cesium3DTileset, DataSource, Viewer} from \"cesium\";\n\nimport apiService from \"./api/apiService\";\n\nimport {legend} from \"./cesium/dataLoader\";\n\n\n@customElement('map-viewer')\nexport class MapViewer extends LitElement{\n    static override styles = styles;\n\n    @property({type: Boolean})\n    loading = true;\n\n    @property({ type: String, attribute: 'cesium-base-url' })\n    cesiumBaseURL = '';\n\n    @property({ type: String, attribute: 'ion-token' })\n    ionToken = '';\n\n    @property({ type: String, attribute: 'data-terrain' }) // New\n    dataTerrain = '';\n\n    @property({ type: Array, attribute: 'data-tileset', converter: {\n            fromAttribute: (value: any) => {\n                try {\n                    return new Map(JSON.parse(value));\n                } catch {\n                    return new Map();\n                }\n            },\n        }})\n    tilesetUrl:  Map<string, { url: string; icon: string | undefined, description: string | undefined, tileset?: Cesium3DTileset  }> = new Map();\n\n\n    @property({ type: Object, converter: {\n            fromAttribute: (value:any) => {\n                try {\n                    return new Map(JSON.parse(value));\n                } catch {\n                    return new Map();\n                }\n            },\n        }})\n    data: Map<string, { url: string; contour: boolean, icon: string | undefined, description: string | undefined, dataSource:DataSource | undefined, colorize: string | undefined   }> = new Map();\n\n    @property({type: String}) forestCover = \"\";\n    @property({type: String}) areaForestCover = \"\";\n\n\n\n    private _viewer: Viewer | undefined;\n\n    constructor() {\n        super();\n        this.attachShadow({ mode: 'open' });\n    }\n\n    override render() {\n        return html`\n      ${this.loading ? html`<div id=\"loadingScreen\">Loading...</div>` : null}\n      <div id=\"cesiumContainer\">\n      </div>\n      \n      <div id=\"legendContainer\">\n          <div id=\"dataContainer\">\n              <p class=\"dataTitle\">Total forest coverage</p>\n              <div class=\"dataSurface\">\n                  <div class=\"single-chart\">\n                      <svg viewBox=\"0 0 36 36\" class=\"circular-chart green\">\n                          <path class=\"circle-bg\"\n                                d=\"M18 2.0845\n          a 15.9155 15.9155 0 0 1 0 31.831\n          a 15.9155 15.9155 0 0 1 0 -31.831\"\n                          />\n                          <path class=\"circle ${this.loading ? '' : 'circle-animate'}\"\n                                stroke-dasharray=\"64.4, 100\"\n                                :style=\"circleStyle\"\n                                d=\"M18 2.0845\n          a 15.9155 15.9155 0 0 1 0 31.831\n          a 15.9155 15.9155 0 0 1 0 -31.831\"\n                          />\n                          <text x=\"18\" y=\"20.35\" class=\"percentage\">${this.forestCover}</text>\n                      </svg>\n                  </div>\n              </div>\n              <p class=\"dataTitle\">${this.areaForestCover} km2</p>\n          </div>\n      </div>\n      \n      <div id=\"buttonContainer\">\n          \n          <h2 class=\"groupTitle\">Layers</h2>\n          ${Array.from(this.tilesetUrl.entries()).map(\n                  ([key, value]) => html`\n                      <button\n                              class=\"toggleButton\"\n                              @click=\"${() => this.toggleTilesetVisibility(key)}\"\n                      >\n                          <div class=\"buttonContent\">\n                          ${value.icon ? html`<img class=\"icon\" src=\"${value.icon}\" alt=\"Icon for ${key}\" width=\"25\" height=\"25\">` : ''}\n                          ${value.description ? html`<span class=\"buttonDescription\">${value.description}</span>` : ''}\n                          </div>    \n                      </button>\n                  `\n          )}\n          \n          <h2 class=\"groupTitle\">Data</h2>\n          ${Array.from(this.data.entries()).map(\n                  ([key, value]) => html`\n                      <toggle-data\n                              .key=${key}\n                              .value=${value}\n                              .clickFunction=${() => this.toggleDataVisibility(key)}\n                      ></toggle-data>\n          `\n          )}\n          \n      </div>\n    `;\n    }\n\n\n    toggleDataVisibility(key: string) {\n        const data  = this.data.get(key);\n        console.log(\"key is \" + key)\n        if (data) {\n            if (data.dataSource) {\n                data.dataSource.show = !data.dataSource.show;\n                if (key === 'zone' && this.shadowRoot) {\n                    const legend = this.shadowRoot.querySelector('#legend');\n                    if (legend) {\n                        // Se la dataSource è visibile, mostra la legenda, altrimenti nascondila\n                        legend.style.display = data.dataSource.show ? 'flex' : 'none';\n                    }\n                }\n                if (key === 'forest' && this.shadowRoot) {\n                    const forestApi = this.shadowRoot.querySelector('#dataContainer');\n                    if (forestApi) {\n                        // Se la dataSource è visibile, mostra la legenda, altrimenti nascondila\n                        forestApi.style.display = data.dataSource.show ? 'flex' : 'none';\n                    }\n                }\n            }\n        }\n    }\n\n    toggleTilesetVisibility(key: string) {\n        const tilesetInfo = this.tilesetUrl.get(key);\n        console.log(tilesetInfo)\n        if (tilesetInfo && tilesetInfo.tileset) {\n            tilesetInfo.tileset.show = !tilesetInfo.tileset.show;\n        }\n    }\n\n    createLegend() {\n        // Create a legend element\n        const legendElement = document.createElement('div');\n        legendElement.id = 'legend';\n        legendElement.style.display = \"none\"\n\n        if(this.shadowRoot){\n            // @ts-ignore\n            this.shadowRoot.querySelector(\"#legendContainer\").appendChild(legendElement);  // Append to shadowRoot instead of document.body\n        }\n        // Populate the legend with color-information\n        legend.forEach((color, property) => {\n            const item = document.createElement('div');\n            item.className = \"legend-container\"\n\n            const key = document.createElement('div');\n            key.className = 'legend-key';\n            key.style.backgroundColor = color.toCssColorString();\n            key.style.display = 'inline-block';\n            key.style.width = '20px';\n            key.style.height = '20px';\n\n            const value = document.createElement('p');\n            value.className = \"legend-value\"\n            value.innerHTML = property;\n\n            item.appendChild(key);\n            item.appendChild(value);\n            legendElement.appendChild(item);\n        });\n    }\n\n\n    override async updated(changedProperties: Map<string, unknown>) {\n        if (changedProperties.has('data') && this.data.size > 0) {\n            const dataPromises = Array.from(this.data.entries()).map(async ([_, value]) => {\n                const dataSource = await addData(this._viewer, value.url, value.contour, value.colorize);\n                await zoomToDataSource(this._viewer, dataSource);\n                value.dataSource = dataSource;\n                // Create the legend\n            });\n\n            await Promise.all(dataPromises);\n            this.createLegend();\n            this.loading = false;\n        }\n\n        if (changedProperties.has('tilesetUrl') && this.tilesetUrl.size > 0) {\n            const tilesetPromises = Array.from(this.tilesetUrl.entries()).map(async ([_, value]) => {\n                if (this._viewer) {\n                    value.tileset = addTileset(this._viewer, value.url);\n                }\n            });\n            await Promise.all(tilesetPromises);\n        }\n\n    }\n\n    override async firstUpdated(_changedProperties: Map<string, unknown>) {\n        super.firstUpdated(_changedProperties);\n        this._viewer = createCesiumViewer(\n            this.shadowRoot!.getElementById(\"cesiumContainer\")!,\n            this.cesiumBaseURL,\n            this.dataTerrain,\n        );\n\n        this.forestCover = await apiService.getData(\"percentage\", 'forest');\n        this.areaForestCover = await apiService.getData(\"area\", 'forest');\n    }\n\n}\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'map-viewer': MapViewer;\n    }\n}\n"]}