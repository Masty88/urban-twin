{"version":3,"file":"dataLoader.js","sourceRoot":"","sources":["../src/cesium/dataLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    Cesium3DTileset,\r\n    Color,\r\n    ColorMaterialProperty,\r\n    DataSource,\r\n    Entity,\r\n    GeoJsonDataSource,\r\n    JulianDate,\r\n    PointGraphics\r\n} from \"cesium\";\r\n\r\n\r\n// Créez une Map pour stocker les associations couleur/valeur\r\nconst colorizeMap = new Map();\r\nconst legend = new Map<string, Color>();\r\n\r\nfunction hashStringToColor(str: string): Color {\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\r\n    }\r\n    const c = (hash & 0x00FFFFFF)\r\n        .toString(16)\r\n        .toUpperCase();\r\n    return Color.fromCssColorString(\"#\" + \"00000\".substring(0, 6 - c.length) + c);\r\n}\r\n\r\nfunction lerp(start: number, end: number, t: number) {\r\n    return start * (1 - t) + end * t;\r\n}\r\n\r\nfunction generateColor(value: number): Color {\r\n    const normalizedValue = value / 70000;\r\n\r\n    const startColor = Color.ORANGE;\r\n    const endColor = Color.YELLOW;\r\n\r\n    const red = lerp(startColor.red, endColor.red, normalizedValue);\r\n    const green = lerp(startColor.green, endColor.green, normalizedValue);\r\n    const blue = lerp(startColor.blue, endColor.blue, normalizedValue);\r\n\r\n    return new Color(red, green, blue, 1); // L'ultimo parametro è l'alpha (trasparenza), che qui è impostato al massimo (nessuna trasparenza)\r\n}\r\n\r\n\r\nexport async function addData(viewer: any, data: string, contour: boolean, colorize: string | undefined) : Promise< DataSource | undefined> {\r\n    try {\r\n        GeoJsonDataSource.clampToGround = true;\r\n\r\n        const dataSource = await GeoJsonDataSource.load(data, {\r\n            // Aggiunge una funzione per personalizzare l'aspetto delle entità\r\n            clampToGround: true,\r\n        });\r\n\r\n        // Itera su tutte le entità del DataSource\r\n        dataSource.entities.values.forEach((entity: Entity) => {\r\n            // Se l'entità ha una proprietà \"zone\", usa il colore corrispondente dalla funzione di hash\r\n\r\n            entity.billboard = undefined;\r\n            entity.point = new PointGraphics({\r\n                color: Color.GREEN,\r\n                pixelSize: 15\r\n            });\r\n            entity.label = undefined;\r\n            if (entity.properties) {\r\n                const kWh = entity.properties['kWh'];\r\n                if (kWh) {\r\n                    const value = kWh.getValue();\r\n                    console.log('value',typeof value)\r\n                    if (typeof value === 'number') {\r\n                        // Genera un colore basato sul valore kWh\r\n                        const color = generateColor(value);\r\n                        if (entity.polygon) {\r\n                            entity.polygon.material = new ColorMaterialProperty(color);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (entity.properties && entity.properties[colorize]) {\r\n                // @ts-ignore\r\n                const zone = entity.properties[colorize].getValue();\r\n                let color = colorizeMap.get(zone);\r\n\r\n                if (!color) {\r\n                    color = hashStringToColor(zone);  // use the same color generation function\r\n                    colorizeMap.set(zone, color);\r\n                }\r\n\r\n                // Also store the color/value association in the legend\r\n                legend.set(zone, color);\r\n\r\n                if (zone && entity.polygon) {\r\n                    entity.polygon.material = new ColorMaterialProperty(color);\r\n                }\r\n            }\r\n        });\r\n\r\n        viewer.dataSources.add(dataSource);\r\n        dataSource.show = false;\r\n        contour && drawContour(viewer, dataSource);\r\n        return dataSource;\r\n    } catch (error) {\r\n        console.error('Error loading data:', error);\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function addTileset(viewer: any, url: string) {\r\n        // @ts-ignore\r\n    const tileset = viewer.scene.primitives.add(new Cesium3DTileset({url}));\r\n    return tileset;\r\n}\r\n\r\nexport function drawContour(viewer: any, dataSource: DataSource) {\r\n    const entities = dataSource.entities.values;\r\n    entities.forEach((e: Entity) => {\r\n        if (e.polygon?.hierarchy) {\r\n            // Set the material color to fully transparent\r\n            // e.polygon.material = new ColorMaterialProperty(Color.TRANSPARENT);\r\n            // Add a polyline for the contour\r\n            viewer.entities.add({\r\n                polyline: {\r\n                    positions: e.polygon.hierarchy.getValue(JulianDate.now()).positions,\r\n                    width: 3,\r\n                    material: Color.YELLOW.withAlpha(0.5),\r\n                    clampToGround: true,\r\n                    show: true,\r\n                },\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport { legend };\r\n"]}