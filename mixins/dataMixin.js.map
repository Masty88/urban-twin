{"version":3,"file":"dataMixin.js","sourceRoot":"","sources":["../src/mixins/dataMixin.ts"],"names":[],"mappings":";;;;;;AACA,OAAO,EAAC,KAAK,EAAsB,iBAAiB,EAAE,UAAU,EAAC,MAAM,QAAQ,CAAC;AAChF,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAK7C,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAoC,UAAa,EAAE,EAAE;IACtF,MAAM,0BAA2B,SAAQ,UAAU;QAAnD;;YAEI,gBAAW,GAAsC,EAAE,CAAC;QAqCxD,CAAC;QAnCG,KAAK,CAAC,OAAO,CAAC,IAAY,EAAE,KAAc;;YACtC,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;YACnC,IAAI;gBACA,iBAAiB,CAAC,aAAa,GAAG,IAAI,CAAA;gBACtC,MAAM,UAAU,GAAsB,MAAM,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACzE,MAAC,IAAY,CAAC,OAAO,0CAAE,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;gBACnD,KAAK,IAAI,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;gBAChD,IAAI,CAAC,aAAa,EAAE,CAAC;aACxB;YAAC,OAAO,KAAK,EAAE;gBACZ,OAAO,CAAC,KAAK,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;aAC/C;QACL,CAAC;QAED;;;;WAIG;QACK,qBAAqB,CAAC,UAAuB;YACjD,MAAM,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC5C,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAS,EAAC,EAAE;;gBAC1B,IAAI,MAAA,CAAC,CAAC,OAAO,0CAAE,SAAS,EAAC;oBACrB,MAAC,IAAY,CAAC,OAAO,0CAAE,QAAQ,CAAC,GAAG,CAAC;wBAChC,QAAQ,EAAC;4BACL,SAAS,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC,SAAS;4BACnE,KAAK,EAAE,CAAC;4BACR,QAAQ,EAAE,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC;4BACrC,aAAa,EAAE,IAAI;yBACtB;qBACJ,CAAC,CAAC;oBACH,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;iBACjC;YACL,CAAC,CAAC,CAAA;QACN,CAAC;KAEJ;IArCG;QADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;mEACyB;IAqCvD,CAAC;IACF,OAAO,0BAA+B,CAAC;AAC3C,CAAC,CAAC","sourcesContent":["import { LitElement } from 'lit';\r\nimport {Color, DataSource, Entity, GeoJsonDataSource, JulianDate} from 'cesium';\r\nimport { property } from 'lit/decorators.js';\r\n\r\ntype Constructor<T = {}> = new (...args: any[]) => T;\r\n\r\n\r\nexport const CesiumDataSourceMixin = <T extends Constructor<LitElement>>(SuperClass: T) => {\r\n    class CesiumDataSourceMixinClass extends SuperClass {\r\n        @property({ type: Object })\r\n        dataSources: Record<string, GeoJsonDataSource> = {};\r\n\r\n        async addData(data: string, clamp: boolean) {\r\n            console.log('Loading data:', data);\r\n            try {\r\n                GeoJsonDataSource.clampToGround = true\r\n                const dataSource: GeoJsonDataSource = await GeoJsonDataSource.load(data);\r\n                (this as any)._viewer?.dataSources.add(dataSource);\r\n                clamp && this.clampPolygonsToGround(dataSource);\r\n                this.requestUpdate();\r\n            } catch (error) {\r\n                console.error('Error loading data:', error);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Adds polylines to the Cesium viewer that are clamped to the ground and based on the polygons in the given data source.\r\n         * Removes the original polygons from the data source.\r\n         * @param dataSource The data source containing the polygons to use as the basis for the polylines.\r\n         */\r\n        private clampPolygonsToGround(dataSource : DataSource){\r\n            const entities = dataSource.entities.values;\r\n            entities.forEach((e: Entity)=>{\r\n                if (e.polygon?.hierarchy){\r\n                    (this as any)._viewer?.entities.add({\r\n                        polyline:{\r\n                            positions: e.polygon.hierarchy.getValue(JulianDate.now()).positions,\r\n                            width: 3,\r\n                            material: Color.YELLOW.withAlpha(0.5),\r\n                            clampToGround: true\r\n                        }\r\n                    });\r\n                    dataSource.entities.remove(e);\r\n                }\r\n            })\r\n        }\r\n\r\n    };\r\n    return CesiumDataSourceMixinClass as T;\r\n};\r\n"]}